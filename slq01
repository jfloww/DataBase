
   SHOW DATABASES : Show what DB in the server
   USE world : Assgined Database to use 
   SHOW TABLES : Information of tables in Database world 
   Describe city; : Information of a table city 
   SELECT ... FROM; : Bringing columns that I want to print 
   EX) SELECT select_expr
       FROM talbe_references
       WHERE where_condition 
       GROUP BY {col_name | expr | position}
       HAVING where_condition
       ORDER BY {col_name | expr | position}
   Condition : OR, AND, =, <, >, <=, >=, <>, !=, NOT, BETWEEN...AND, IN, LIKE, SubQuery
    IN : 'KOR', 'USA', 'JPN'
    LIKE : 'US_', 'Tel %'
    SubQuery : Query statement in Query, but not printing more than one result
    -> ANY (= SOME), ALL
       EX) : SELECT *
            FROM city
			WHERE Population > ANY ( SELECT Population
                              FROM city
                              WHERE District = 'New York' );
   ORDER BY : Statement for print order (default : ASCENDING / DESC)
       EX) : ORDER BY CountryCode ASC, Population DESC;
   DISTINCT : Print unique values
   LIMIT : Limit the number of results
     EX) : LIMIT 10;
   GROUP BY: Combine as a group, Using with Aggregate Function, Using in SELECT statement
   Condition: AVG(), MIN(), MAX(), COUNT(), COUNT(DISTINCT), STDEV(), VARIANCE()
      EX) : SELECT CountryCode, MAX(Population) AS 'Population'
           FROM city
              GROUP BY CountryCode;
   HAVING : Simmilar with WHERE statement, but must be next to GROUP BY
   EX) : SELECT CountryCode, MAX(Population)
         FROM city
		 GROUP BY CountryCode
         HAVING MAX(Polulation) > 80000;
   ROLLUP : Using when we need total or middle total, Using WITH ROLLUP with GROUP BY statement
	EX) : SELECT CountryCode, Name, SUM(Poplulation)
		  FROM city
          GROUP BY CountryCodem Name WITH ROLLUP;
   JOIN : Bring data from another talbe
	EX) : SELECT *
        FROM city
        JOIN country ON city.CountryCode = country.Code
		JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode;
   Function: 
      LENGTH(), CONCAT(), LOCATE(), LEFT(), RIGHT(), LOWER(), UPPER(), REPLACE(), TRIM(BOTH(default), LEADING, TRAILING), FORMAT(), 
        FLOOR(), CEIL(), ROUND(), SQRT(), POW(), EXP(), LOG(), SIN(), COS(), TAN(), PI(), ABS(), RAND(), NOW(), CURDATE(), CURTIME(), 
        DATE(), MONTH(), DAY(), HOUR(), MINUTE(), SECOND(), MONTHNAME(), DAYNAME(), DAYOFWEEK(), DAYOFMONTH(), DAYOFYEAR(), DATE_FORMAT()
   CREEATE TABLE : Create table
   EX): CREATE TABLE city2 AS SELECT * FROM city;
    CREATE DATABASE : Create new database
    EX): CREATE DATABASE jay; ( database named jay ) 
       USE jay;
         CREATE TABLE test2 (
         id INT NOT NULL PRIMARY KEY,
            col1 INT NULL,
            col2 FLOAT NULL,
            col13 VARCHAR(45) NULL
         )
   ALTER TABLE : ADD or MODIFY or DROP columns
    EX): ALTER TABLE test2
       ADD col4 INT NULL;
         or
         MODIFY col4 VARCHAR(20) NULL;
         or
         DROP col4;
	Index:
		- Using for find the data that I want in the table
		- The more time takes if there are large data because it search the whole talbe in order
        - If we modify, drop, or add data, we must to modify index
        - Often used in table for search
	CREATE INDEX
		EX) : CREATE INDEX CollIdx
			  ON test (col1)
	FULLTEXT INDEX
		EX) : ALTER TABLE test
			  ADD FULLTEXT Col3Idx(col3); (To search text index)
	DROP INDEX
		EX) : ALTER TABLE test
			  DROP INDEX Col3Idx;
              or
              DROP INDEX Col2IDx ON test;
	VIEW
		- Virtual table in the database
        - It has rows and columns, but not stored in the database
        - By using VIEW, it can print various tables or view in one table
        Positive
			- It can print needed columns not whole table for user
            - Using it for complex quert to simplify
            - Query reusable
		Negative
			- One defiend view cannot be modified
            - Add, Drop, and Modify have some limitaion
            - Cannot have own index
		EX) : CREATE VIEW testView AS
			  SELECT Col1, Col2, Col3
              FROM test;
              
              SELECT * FROM testView;
		- Can be droped
			EX) : DROP VIEW testView
	INSERT : 
		- Can be added into the row very next to talbe name
		- Must have the same number of columns with table
        EX) : 
			INSERT INTO test
            VALUES(1, 123, 1.1, "Test");
	INSERT INTO SELECT :
		- Insert data in test into test2
        EX) :
			INSERT INTO test2 SELECT * FROM test;
	UPDATE :
		- Modifying statement
        - Can be skipped the WHERE statement, but change values of whole columns in the talbe
        EX) : 
			UPDATE test
			SET col1 = 1, col2 = 1.0, col3 = 'test'
            WHERE id = 1;
	DELETE :
		- Delete whole row
        - Data capacity is not decreased
        - Can be restored
        EX): 
			DELETE FROM test
			WHERE id = 1;
	TRUNCATE :
		- Cannot be restored
        - Data capacity is decresed
        - Remove row
	DROP TABLE :
		- Cannot be restored
        - Remove whole table
	DROP DATABASE :
		- Remove whole database
        
            
            
            
        
	Problem1 : Join tables city, country, and countrylanguage, and create view of Korea
		USE world
        
		CREATE VIEW allView AS
        SELECT city.Name, country.SurfaceArea, city.Population, countrylanguage.Language 
        FROM city
        JOIN country ON city.CountryCode = country.Code
        JOIN countrylanguage ON city.CountryCode = countryCode = countrylanguage.CountryCode
        WHERE city.CountryCode = 'KOR';
        
		SELECT * FROM allView;
  
